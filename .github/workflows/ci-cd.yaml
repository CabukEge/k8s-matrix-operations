name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: numeric

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run tests
        run: |
          python -m pytest tests/ -v

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/cabukege/numeric:latest

      - name: Set up Minikube
        uses: medyagh/setup-minikube@master

      - name: Start Minikube tunnel
        run: minikube tunnel &

      - name: Enable Ingress addon
        run: minikube addons enable ingress

      - name: Enable Metrics Server addon
        run: minikube addons enable metrics-server

      - name: Wait for Ingress Controller Pods to be Ready
        run: |
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s

      - name: Remove Ingress Admission Webhook (if necessary)
        run: |
          kubectl delete validatingwebhookconfiguration ingress-nginx-admission || true
          kubectl delete validatingwebhookconfiguration ingress-nginx-controller-admission || true
          
      - name: Verify NUMERIC Exists
        run: |
          if [ -z "${{ secrets.NUMERIC }}" ]; then
            echo "NUMERIC does not exist. Exiting pipeline."
            exit 1
          else
            echo "NUMERIC exists."
          fi
          
      - name: Create and Verify GHCR Secret in Kubernetes
        run: |
          echo "Creating GHCR secret..."
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.NUMERIC }}" \
            --docker-email="egecabuk.it@gmail.com" \
            -n default \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Verifying GHCR secret exists in the default namespace..."
          if ! kubectl get secret ghcr-secret -n default >/dev/null 2>&1; then
            echo "Secret ghcr-secret does not exist. Exiting pipeline."
            exit 1
          else
            echo "Secret ghcr-secret exists."
          fi

      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/hpa.yaml
      
      - name: Debug Kubernetes Deployment
        run: |
          echo "=== Pod Status ==="
          kubectl get pods -o wide

          echo "=== Node Status ==="
          kubectl get nodes -o wide

          echo "=== Deployment Status ==="
          kubectl describe deployment numeric-api-deployment

          echo "=== Pod Descriptions ==="
          for pod in $(kubectl get pods -l app=numeric-api -o jsonpath='{.items[*].metadata.name}'); do
            echo "------ Description for pod: $pod ------"
            kubectl describe pod "$pod"
          done

          echo "=== Pod Logs ==="
          for pod in $(kubectl get pods -l app=numeric-api -o jsonpath='{.items[*].metadata.name}'); do
            echo "------ Logs for pod: $pod ------"
            kubectl logs "$pod" || echo "No logs available yet for pod: $pod"
          done

          echo "=== Kubernetes Events (sorted by creation time) ==="
          kubectl get events --sort-by=.metadata.creationTimestamp

          echo "=== Check Image Pull Secret ==="
          kubectl get secret ghcr-secret -n default -o yaml || echo "No ghcr-secret found."

      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/numeric-api-deployment
                   
      - name: Get deployment status
        run: |
          echo "Deployment Status:"
          kubectl get deployments
          echo "\nPod Status:"
          kubectl get pods
          echo "\nService Status:"
          kubectl get services
          echo "\nMinikube Services:"
          minikube service list
